// <auto-generated />
using System;
using DevLife_Portal.Infrastructure.Database.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevLife_Portal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628122721_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevLife_Portal.Common.Models.BugChaseScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bugchase_scores");

                    b.HasIndex("UserId");

                    b.ToTable("bugchase_scores", (string)null);
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.DailyChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("QuestionSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_slug");

                    b.HasKey("Id")
                        .HasName("pk_daily_challenges");

                    b.ToTable("daily_challenges", (string)null);
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Streak")
                        .HasColumnType("integer")
                        .HasColumnName("streak");

                    b.Property<string>("TechnoStack")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("techno_stack");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer")
                        .HasColumnName("total_points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<int>("ZodiacSignId")
                        .HasColumnType("integer")
                        .HasColumnName("zodiac_sign_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ux_users_usernames");

                    b.HasIndex("ZodiacSignId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.UserDailyChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_daily_challenges");

                    b.HasIndex("UserId");

                    b.ToTable("user_daily_challenges", (string)null);
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.UserStreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer")
                        .HasColumnName("current_streak");

                    b.Property<DateTime>("LastCompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_completed_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_streaks");

                    b.HasIndex("UserId");

                    b.ToTable("user_streaks", (string)null);
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.ZodiacSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DailyTip")
                        .HasColumnType("text")
                        .HasColumnName("daily_tip");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emoji");

                    b.Property<int>("EndDay")
                        .HasColumnType("integer")
                        .HasColumnName("end_day");

                    b.Property<int>("EndMonth")
                        .HasColumnType("integer");

                    b.Property<string>("LuckyTechnology")
                        .HasColumnType("text")
                        .HasColumnName("lucky_technology");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StartDay")
                        .HasColumnType("integer")
                        .HasColumnName("start_day");

                    b.Property<int>("StartMonth")
                        .HasColumnType("integer")
                        .HasColumnName("start_month");

                    b.HasKey("Id")
                        .HasName("pk_zodiac_signs");

                    b.ToTable("zodiac_signs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Emoji = "♑",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Capricorn",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 2,
                            Emoji = "♒",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Aquarius",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 3,
                            Emoji = "♓",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Pisces",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 4,
                            Emoji = "♈",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Aries",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 5,
                            Emoji = "♉",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Taurus",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 6,
                            Emoji = "♊",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Gemini",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 7,
                            Emoji = "♋",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Cancer",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 8,
                            Emoji = "♌",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Leo",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 9,
                            Emoji = "♍",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Virgo",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 10,
                            Emoji = "♎",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Libra",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 11,
                            Emoji = "♏",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Scorpio",
                            StartDay = 0,
                            StartMonth = 0
                        },
                        new
                        {
                            Id = 12,
                            Emoji = "♐",
                            EndDay = 0,
                            EndMonth = 0,
                            Name = "Sagittarius",
                            StartDay = 0,
                            StartMonth = 0
                        });
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.BugChaseScore", b =>
                {
                    b.HasOne("DevLife_Portal.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bugchase_scores_users");
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.User", b =>
                {
                    b.HasOne("DevLife_Portal.Common.Models.ZodiacSign", "ZodiacSign")
                        .WithMany("Users")
                        .HasForeignKey("ZodiacSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_zodiac_signs");

                    b.Navigation("ZodiacSign");
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.UserDailyChallenge", b =>
                {
                    b.HasOne("DevLife_Portal.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_daily_challenges_users");
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.UserStreak", b =>
                {
                    b.HasOne("DevLife_Portal.Common.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_streaks_users");
                });

            modelBuilder.Entity("DevLife_Portal.Common.Models.ZodiacSign", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
